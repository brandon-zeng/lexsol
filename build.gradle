import javax.xml.bind.JAXB
import org.jooq.util.GenerationTool

buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
		codegenVersion = '3.6.0'
        postgresVersion = '9.4.1208.jre7'
	}
	repositories {
        mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("org.jooq:jooq-codegen:${codegenVersion}")
		classpath("org.postgresql:postgresql:${postgresVersion}")
	}
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
	baseName = 'lexol'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/lexsol'
    user = 'postgres'
    password = 'postgres'
}

dependencies {
    compile("org.springframework:spring-jdbc")
	compile('org.springframework.boot:spring-boot-starter-jooq')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-actuator")
	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test') 
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
    jdbc() {
        driver('org.postgresql.Driver')
        url('jdbc:postgresql://localhost:5432/lexsol')
        user('postgres')
        password('postgres')
        schema('public')
    }
    generator() {
        database() {
        }
        generate() {
        }
        target() {
            packageName('com.example.model')
            directory('src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)